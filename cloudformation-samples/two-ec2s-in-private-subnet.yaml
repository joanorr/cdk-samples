---
Resources:
  # Security groups
  AllowHTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from anywhere
      GroupName: AllowHTTP
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: HTTP from anywhere
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      VpcId: !ImportValue CFSamplesVpcId

  # Create two EC2 instances in the private subnets
  PrivateSubnet1EC2:
    Type: AWS::EC2::Instance
    Properties:
      # AvailabilityZone: eu-west-1a
      ImageId: ami-0b815cfb867003088
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref AllowHTTPSecurityGroup
      SubnetId: !ImportValue CFSamplesPrivateSubnet1Id
      Tags:
        - Key: Name
          Value: EC2 in private subnet 1
      UserData:
        Fn::Base64:  |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from $(hostname -f) in subnet 1</h1>" > /var/www/html/index.html
  PrivateSubnet2EC2:
    Type: AWS::EC2::Instance
    Properties:
      # AvailabilityZone: eu-west-1b
      ImageId: ami-0b815cfb867003088
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref AllowHTTPSecurityGroup
      SubnetId: !ImportValue CFSamplesPrivateSubnet2Id
      Tags:
        - Key: Name
          Value: EC2 in private subnet 2
      UserData:
        Fn::Base64:  |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from $(hostname -f) in subnet 2</h1>" > /var/www/html/index.html


  # Create a load balancer in the two public subnets
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: LoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref AllowHTTPSecurityGroup
      Subnets:
        - !ImportValue CFSamplesPublicSubnet1Id
        - !ImportValue CFSamplesPublicSubnet2Id
      Type: application
  HttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: HttpTargetGroup
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref PrivateSubnet1EC2
          Port: 80
        - Id: !Ref PrivateSubnet2EC2
          Port: 80
      VpcId: !ImportValue CFSamplesVpcId
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HttpTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      HostedZoneName: webskate101.com.
      Name: cf-samples-elb.webskate101.com
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
