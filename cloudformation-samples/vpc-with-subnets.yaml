---

# Set up a VPC in with two public subnets and two private subnets.

Resources:
  # First set up a VPC and give it an internet gateway.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: VPC
  # Create the Internet gateway and attach it to the VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet Gateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Next, set up a (public) route table which allows access from anywhere.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public RouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Create public subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC
  # Add the public route table to the public subnet
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Create public subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref VPC
  # Add the public route table to the public subnet
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # A NAT Gateway in public subnet 1
  EipForPublicSubnet1Nat:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: EIP for public subnet 1 NAT
  NatGatewayForPublicSubnet1:
    Type: AWS::EC2::NatGateway
    DependsOn: EipForPublicSubnet1Nat
    Properties:
      AllocationId: !GetAtt EipForPublicSubnet1Nat.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NAT Gateway for public subnet 1

  # A NAT Gateway in public subnet 2
  EipForPublicSubnet2Nat:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: EIP for public subnet 2 NAT
  NatGatewayForPublicSubnet2:
    Type: AWS::EC2::NatGateway
    DependsOn: EipForPublicSubnet2Nat
    Properties:
      AllocationId: !GetAtt EipForPublicSubnet2Nat.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NAT Gateway for public subnet 2

  # Set up a route table which routes to the NAT gateway in public subnet 1
  RouteTableForPrivateSubnet1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: NAT Gateway Route Table for public subnet 1
  RouteForEuWest1aNatGateway:
    Type: AWS::EC2::Route
    DependsOn: NatGatewayForPublicSubnet1
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnet1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayForPublicSubnet1

  # Set up a route table which routes to the NAT gateway in public subnet 1
  RouteTableForPrivateSubnet2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: NAT Gateway Route Table for public subnet 2
  RouteForEuWest1bNatGateway:
    Type: AWS::EC2::Route
    DependsOn: NatGatewayForPublicSubnet2
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnet2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayForPublicSubnet2

  # Create private subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: Private Subnet 1
      VpcId: !Ref VPC
  # Add the private route table to the subnet
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnet1
      SubnetId: !Ref PrivateSubnet1

  # Create private subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: Private Subnet 2
      VpcId: !Ref VPC
  # Add the private route table to the subnet
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnet2
      SubnetId: !Ref PrivateSubnet2

Outputs:
  VpcIdOutput:
    Description: The id of the VPC
    Value: !Ref VPC
    Export:
      Name: CFSamplesVpcId
  PublicSubnet1IdOutput:
    Description: The id of public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: CFSamplesPublicSubnet1Id
  PublicSubnet2IdOutput:
    Description: The id of public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: CFSamplesPublicSubnet2Id
  PrivateSubnet1IdOutput:
    Description: The id of private subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: CFSamplesPrivateSubnet1Id
  PrivateSubnet2IdOutput:
    Description: The id of private subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: CFSamplesPrivateSubnet2Id